"use strict";
var vg_controls_1 = require("./vg-controls");
var vg_api_1 = require("../core/services/vg-api");
var Observable_1 = require("rxjs/Observable");
require('rxjs/add/observable/fromEvent');
describe('Controls Bar', function () {
    var controls;
    var ref;
    var api;
    beforeEach(function () {
        jasmine.clock().uninstall();
        jasmine.clock().install();
        api = new vg_api_1.VgAPI();
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        controls = new vg_controls_1.VgControls(api, ref);
    });
    afterEach(function () {
        jasmine.clock().uninstall();
    });
    it('Should have been defined', function () {
        expect(controls).toBeTruthy();
    });
    it('Should listen for mouseenter and mouseleave events', function () {
        spyOn(Observable_1.Observable, 'fromEvent').and.callThrough();
        var vgElem = document.createElement('vg-player');
        api.registerElement(vgElem);
        controls.ngOnInit();
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mouseenter');
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mouseleave');
    });
    it('Should hide controls after view init', function () {
        spyOn(controls, 'hide').and.callFake(function () { });
        controls.vgAutohide = true;
        controls.ngAfterViewInit();
        expect(controls.hide).toHaveBeenCalled();
    });
    it('Should show controls after view init', function () {
        spyOn(controls, 'show').and.callFake(function () { });
        controls.vgAutohide = false;
        controls.ngAfterViewInit();
        expect(controls.show).toHaveBeenCalled();
    });
    it('Should show controls', function () {
        spyOn(window, 'clearTimeout').and.callFake(function () { });
        controls.show();
        expect(window.clearTimeout).toHaveBeenCalled();
        expect(controls.hideControls).toBe(false);
    });
    it('Should hide controls', function () {
        controls.vgAutohide = true;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(true);
    });
    it('Should not hide controls', function () {
        controls.hideControls = false;
        controls.vgAutohide = false;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctY29udHJvbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZnLWNvbnRyb2xzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUF5QixlQUFlLENBQUMsQ0FBQTtBQUV6Qyx1QkFBb0IseUJBQXlCLENBQUMsQ0FBQTtBQUM5QywyQkFBeUIsaUJBQWlCLENBQUMsQ0FBQTtBQUUzQyxRQUFPLCtCQUErQixDQUFDLENBQUE7QUFFdkMsUUFBUSxDQUFDLGNBQWMsRUFBRTtJQUNyQixJQUFJLFFBQW1CLENBQUM7SUFDeEIsSUFBSSxHQUFjLENBQUM7SUFDbkIsSUFBSSxHQUFTLENBQUM7SUFFZCxVQUFVLENBQUM7UUFDUCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRTFCLEdBQUcsR0FBRyxJQUFJLGNBQUssRUFBRSxDQUFDO1FBRWxCLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRTtnQkFDWCxZQUFZLEVBQUUsVUFBQyxJQUFJO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7YUFDSjtTQUNKLENBQUM7UUFFRixRQUFRLEdBQUcsSUFBSSx3QkFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQztRQUNOLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUU7UUFDckQsS0FBSyxDQUFDLHVCQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRWpELElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFakQsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFcEIsTUFBTSxDQUFDLHVCQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3ZGLE1BQU0sQ0FBQyx1QkFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMzRixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRTtRQUN2QyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztRQUUvQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUUzQixRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNDQUFzQyxFQUFFO1FBQ3ZDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1FBRS9DLFFBQVEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRTVCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUUzQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUU7UUFDdkIsS0FBSyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7UUFFckQsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWhCLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMvQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtRQUN2QixRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUUzQixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFaEIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUMzQixRQUFRLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUM5QixRQUFRLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUU1QixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFaEIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZ0NvbnRyb2xzfSBmcm9tIFwiLi92Zy1jb250cm9sc1wiO1xuaW1wb3J0IHtFbGVtZW50UmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtWZ0FQSX0gZnJvbSBcIi4uL2NvcmUvc2VydmljZXMvdmctYXBpXCI7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcblxuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL2Zyb21FdmVudCc7XG5cbmRlc2NyaWJlKCdDb250cm9scyBCYXInLCAoKSA9PiB7XG4gICAgbGV0IGNvbnRyb2xzOlZnQ29udHJvbHM7XG4gICAgbGV0IHJlZjpFbGVtZW50UmVmO1xuICAgIGxldCBhcGk6VmdBUEk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgamFzbWluZS5jbG9jaygpLnVuaW5zdGFsbCgpO1xuICAgICAgICBqYXNtaW5lLmNsb2NrKCkuaW5zdGFsbCgpO1xuXG4gICAgICAgIGFwaSA9IG5ldyBWZ0FQSSgpO1xuXG4gICAgICAgIHJlZiA9IHtcbiAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGU6IChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb250cm9scyA9IG5ldyBWZ0NvbnRyb2xzKGFwaSwgcmVmKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICAgIGphc21pbmUuY2xvY2soKS51bmluc3RhbGwoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGF2ZSBiZWVuIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb250cm9scykudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBsaXN0ZW4gZm9yIG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmUgZXZlbnRzJywgKCkgPT4ge1xuICAgICAgICBzcHlPbihPYnNlcnZhYmxlLCAnZnJvbUV2ZW50JykuYW5kLmNhbGxUaHJvdWdoKCk7XG5cbiAgICAgICAgbGV0IHZnRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZnLXBsYXllcicpO1xuXG4gICAgICAgIGFwaS5yZWdpc3RlckVsZW1lbnQodmdFbGVtKTtcblxuICAgICAgICBjb250cm9scy5uZ09uSW5pdCgpO1xuXG4gICAgICAgIGV4cGVjdChPYnNlcnZhYmxlLmZyb21FdmVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYXBpLnZpZGVvZ3VsYXJFbGVtZW50LCAnbW91c2VlbnRlcicpO1xuICAgICAgICBleHBlY3QoT2JzZXJ2YWJsZS5mcm9tRXZlbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFwaS52aWRlb2d1bGFyRWxlbWVudCwgJ21vdXNlbGVhdmUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGlkZSBjb250cm9scyBhZnRlciB2aWV3IGluaXQnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGNvbnRyb2xzLCAnaGlkZScpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgY29udHJvbHMudmdBdXRvaGlkZSA9IHRydWU7XG5cbiAgICAgICAgY29udHJvbHMubmdBZnRlclZpZXdJbml0KCk7XG5cbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzLmhpZGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgc2hvdyBjb250cm9scyBhZnRlciB2aWV3IGluaXQnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGNvbnRyb2xzLCAnc2hvdycpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgY29udHJvbHMudmdBdXRvaGlkZSA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnRyb2xzLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuXG4gICAgICAgIGV4cGVjdChjb250cm9scy5zaG93KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIHNob3cgY29udHJvbHMnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKHdpbmRvdywgJ2NsZWFyVGltZW91dCcpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgY29udHJvbHMuc2hvdygpO1xuXG4gICAgICAgIGV4cGVjdCh3aW5kb3cuY2xlYXJUaW1lb3V0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIGV4cGVjdChjb250cm9scy5oaWRlQ29udHJvbHMpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoaWRlIGNvbnRyb2xzJywgKCkgPT4ge1xuICAgICAgICBjb250cm9scy52Z0F1dG9oaWRlID0gdHJ1ZTtcblxuICAgICAgICBjb250cm9scy5oaWRlKCk7XG5cbiAgICAgICAgamFzbWluZS5jbG9jaygpLnRpY2soMzEwMCk7XG4gICAgICAgIGV4cGVjdChjb250cm9scy5oaWRlQ29udHJvbHMpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIG5vdCBoaWRlIGNvbnRyb2xzJywgKCkgPT4ge1xuICAgICAgICBjb250cm9scy5oaWRlQ29udHJvbHMgPSBmYWxzZTtcbiAgICAgICAgY29udHJvbHMudmdBdXRvaGlkZSA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnRyb2xzLmhpZGUoKTtcblxuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudGljaygzMTAwKTtcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzLmhpZGVDb250cm9scykudG9CZShmYWxzZSk7XG4gICAgfSk7XG59KTtcblxuaW50ZXJmYWNlIERlY29yYXRvckludm9jYXRpb24ge1xuICB0eXBlOiBGdW5jdGlvbjtcbiAgYXJncz86IGFueVtdO1xufVxuIl19
"use strict";
var vg_buffering_1 = require("./vg-buffering");
var vg_api_1 = require("../core/services/vg-api");
var vg_states_1 = require("../core/states/vg-states");
describe('Buffering', function () {
    var vgBuffering;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        vgBuffering = new vg_buffering_1.VgBuffering(ref, api);
    });
    describe('onPlayerReady', function () {
        it('should subscribe to bufferDetected media events', function () {
            spyOn(api, 'getMediaById').and.returnValue({
                subscriptions: {
                    bufferDetected: { subscribe: jasmine.createSpy('bufferDetected') }
                }
            });
            vgBuffering.onPlayerReady();
            expect(vgBuffering.target.subscriptions.bufferDetected.subscribe).toHaveBeenCalled();
        });
    });
    describe('isBuffering', function () {
        it('should show if buffer is detected and video is playing', function () {
            vgBuffering.target = {
                state: vg_states_1.VgStates.VG_PLAYING
            };
            spyOn(vgBuffering, 'show');
            vgBuffering.onUpdateBuffer(true);
            expect(vgBuffering.show).toHaveBeenCalled();
        });
        it('should hide if buffer is not detected and video is playing', function () {
            vgBuffering.target = {
                state: vg_states_1.VgStates.VG_PLAYING
            };
            spyOn(vgBuffering, 'hide');
            vgBuffering.onUpdateBuffer(false);
            expect(vgBuffering.hide).toHaveBeenCalled();
        });
        it('should hide if buffer is detected and video is not playing', function () {
            vgBuffering.target = {
                state: vg_states_1.VgStates.VG_PAUSED
            };
            spyOn(vgBuffering, 'hide');
            vgBuffering.onUpdateBuffer(true);
            expect(vgBuffering.hide).toHaveBeenCalled();
        });
    });
    describe('show', function () {
        it('should set displayState to "block"', function () {
            vgBuffering.displayState = 'none';
            vgBuffering.show();
            expect(vgBuffering.displayState).toBe('block');
        });
    });
    describe('hide', function () {
        it('should set displayState to "none"', function () {
            vgBuffering.displayState = 'block';
            vgBuffering.hide();
            expect(vgBuffering.displayState).toBe('none');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctYnVmZmVyaW5nLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2Zy1idWZmZXJpbmcuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkJBQTBCLGdCQUFnQixDQUFDLENBQUE7QUFDM0MsdUJBQW9CLHlCQUF5QixDQUFDLENBQUE7QUFHOUMsMEJBQXlCLDBCQUEwQixDQUFDLENBQUE7QUFFcEQsUUFBUSxDQUFDLFdBQVcsRUFBRTtJQUNsQixJQUFJLFdBQXVCLENBQUM7SUFDNUIsSUFBSSxHQUFjLENBQUM7SUFDbkIsSUFBSSxHQUFTLENBQUM7SUFFZCxVQUFVLENBQUM7UUFDUCxHQUFHLEdBQUc7WUFDRixhQUFhLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLFVBQUMsSUFBSTtvQkFDZixNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNoQixDQUFDO2FBQ0o7U0FDSixDQUFDO1FBRUYsR0FBRyxHQUFHLElBQUksY0FBSyxFQUFFLENBQUM7UUFDbEIsV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNsRCxLQUFLLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Z0JBQ3ZDLGFBQWEsRUFBRTtvQkFDWCxjQUFjLEVBQUUsRUFBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO2lCQUNwRTthQUNKLENBQUMsQ0FBQztZQUNILFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM1QixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDekYsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDcEIsRUFBRSxDQUFDLHdEQUF3RCxFQUFFO1lBQ3pELFdBQVcsQ0FBQyxNQUFNLEdBQWM7Z0JBQzVCLEtBQUssRUFBRSxvQkFBUSxDQUFDLFVBQVU7YUFDN0IsQ0FBQztZQUVGLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0IsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsNERBQTRELEVBQUU7WUFDN0QsV0FBVyxDQUFDLE1BQU0sR0FBYztnQkFDNUIsS0FBSyxFQUFFLG9CQUFRLENBQUMsVUFBVTthQUM3QixDQUFDO1lBRUYsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMzQixXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw0REFBNEQsRUFBRTtZQUM3RCxXQUFXLENBQUMsTUFBTSxHQUFjO2dCQUM1QixLQUFLLEVBQUUsb0JBQVEsQ0FBQyxTQUFTO2FBQzVCLENBQUM7WUFFRixLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQ2IsRUFBRSxDQUFDLG9DQUFvQyxFQUFFO1lBQ3JDLFdBQVcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1lBQ2xDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuQixNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLE1BQU0sRUFBRTtRQUNiLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtZQUNwQyxXQUFXLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztZQUNuQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZ0J1ZmZlcmluZ30gZnJvbSBcIi4vdmctYnVmZmVyaW5nXCI7XG5pbXBvcnQge1ZnQVBJfSBmcm9tIFwiLi4vY29yZS9zZXJ2aWNlcy92Zy1hcGlcIjtcbmltcG9ydCB7SVBsYXlhYmxlfSBmcm9tIFwiLi4vY29yZS92Zy1tZWRpYS9pLXBsYXlhYmxlXCI7XG5pbXBvcnQge0VsZW1lbnRSZWZ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBWZ1N0YXRlcyB9IGZyb20gXCIuLi9jb3JlL3N0YXRlcy92Zy1zdGF0ZXNcIjtcblxuZGVzY3JpYmUoJ0J1ZmZlcmluZycsICgpID0+IHtcbiAgICBsZXQgdmdCdWZmZXJpbmc6VmdCdWZmZXJpbmc7XG4gICAgbGV0IHJlZjpFbGVtZW50UmVmO1xuICAgIGxldCBhcGk6VmdBUEk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgcmVmID0ge1xuICAgICAgICAgICAgbmF0aXZlRWxlbWVudDoge1xuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZTogKG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGFwaSA9IG5ldyBWZ0FQSSgpO1xuICAgICAgICB2Z0J1ZmZlcmluZyA9IG5ldyBWZ0J1ZmZlcmluZyhyZWYsIGFwaSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnb25QbGF5ZXJSZWFkeScsICgpPT57XG4gICAgICAgIGl0KCdzaG91bGQgc3Vic2NyaWJlIHRvIGJ1ZmZlckRldGVjdGVkIG1lZGlhIGV2ZW50cycsICgpPT57XG4gICAgICAgICAgICBzcHlPbihhcGksICdnZXRNZWRpYUJ5SWQnKS5hbmQucmV0dXJuVmFsdWUoe1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyRGV0ZWN0ZWQ6IHtzdWJzY3JpYmU6IGphc21pbmUuY3JlYXRlU3B5KCdidWZmZXJEZXRlY3RlZCcpIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZnQnVmZmVyaW5nLm9uUGxheWVyUmVhZHkoKTtcbiAgICAgICAgICAgIGV4cGVjdCh2Z0J1ZmZlcmluZy50YXJnZXQuc3Vic2NyaXB0aW9ucy5idWZmZXJEZXRlY3RlZC5zdWJzY3JpYmUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnaXNCdWZmZXJpbmcnLCAoKT0+e1xuICAgICAgICBpdCgnc2hvdWxkIHNob3cgaWYgYnVmZmVyIGlzIGRldGVjdGVkIGFuZCB2aWRlbyBpcyBwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgdmdCdWZmZXJpbmcudGFyZ2V0ID0gPElQbGF5YWJsZT57XG4gICAgICAgICAgICAgICAgc3RhdGU6IFZnU3RhdGVzLlZHX1BMQVlJTkdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNweU9uKHZnQnVmZmVyaW5nLCAnc2hvdycpO1xuICAgICAgICAgICAgdmdCdWZmZXJpbmcub25VcGRhdGVCdWZmZXIodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QodmdCdWZmZXJpbmcuc2hvdykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBoaWRlIGlmIGJ1ZmZlciBpcyBub3QgZGV0ZWN0ZWQgYW5kIHZpZGVvIGlzIHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICB2Z0J1ZmZlcmluZy50YXJnZXQgPSA8SVBsYXlhYmxlPntcbiAgICAgICAgICAgICAgICBzdGF0ZTogVmdTdGF0ZXMuVkdfUExBWUlOR1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc3B5T24odmdCdWZmZXJpbmcsICdoaWRlJyk7XG4gICAgICAgICAgICB2Z0J1ZmZlcmluZy5vblVwZGF0ZUJ1ZmZlcihmYWxzZSk7XG4gICAgICAgICAgICBleHBlY3QodmdCdWZmZXJpbmcuaGlkZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBoaWRlIGlmIGJ1ZmZlciBpcyBkZXRlY3RlZCBhbmQgdmlkZW8gaXMgbm90IHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICB2Z0J1ZmZlcmluZy50YXJnZXQgPSA8SVBsYXlhYmxlPntcbiAgICAgICAgICAgICAgICBzdGF0ZTogVmdTdGF0ZXMuVkdfUEFVU0VEXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzcHlPbih2Z0J1ZmZlcmluZywgJ2hpZGUnKTtcbiAgICAgICAgICAgIHZnQnVmZmVyaW5nLm9uVXBkYXRlQnVmZmVyKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHZnQnVmZmVyaW5nLmhpZGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc2hvdycsICgpPT57XG4gICAgICAgIGl0KCdzaG91bGQgc2V0IGRpc3BsYXlTdGF0ZSB0byBcImJsb2NrXCInLCAoKSA9PiB7XG4gICAgICAgICAgICB2Z0J1ZmZlcmluZy5kaXNwbGF5U3RhdGUgPSAnbm9uZSc7XG4gICAgICAgICAgICB2Z0J1ZmZlcmluZy5zaG93KCk7XG4gICAgICAgICAgICBleHBlY3QodmdCdWZmZXJpbmcuZGlzcGxheVN0YXRlKS50b0JlKCdibG9jaycpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBkZXNjcmliZSgnaGlkZScsICgpPT57XG4gICAgICAgIGl0KCdzaG91bGQgc2V0IGRpc3BsYXlTdGF0ZSB0byBcIm5vbmVcIicsICgpID0+IHtcbiAgICAgICAgICAgIHZnQnVmZmVyaW5nLmRpc3BsYXlTdGF0ZSA9ICdibG9jayc7XG4gICAgICAgICAgICB2Z0J1ZmZlcmluZy5oaWRlKCk7XG4gICAgICAgICAgICBleHBlY3QodmdCdWZmZXJpbmcuZGlzcGxheVN0YXRlKS50b0JlKCdub25lJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG5cbmludGVyZmFjZSBEZWNvcmF0b3JJbnZvY2F0aW9uIHtcbiAgdHlwZTogRnVuY3Rpb247XG4gIGFyZ3M/OiBhbnlbXTtcbn1cbiJdfQ==
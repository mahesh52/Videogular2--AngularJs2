"use strict";
var vg_overlay_play_1 = require("./vg-overlay-play");
var vg_api_1 = require("../core/services/vg-api");
var vg_states_1 = require("../core/states/vg-states");
describe('Videogular Player', function () {
    var overlayPlay;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        overlayPlay = new vg_overlay_play_1.VgOverlayPlay(ref, api);
    });
    it('Should get media by id on init', function () {
        spyOn(api, 'getMediaById').and.callFake(function () { });
        overlayPlay.vgFor = 'test';
        overlayPlay.onPlayerReady();
        expect(api.getMediaById).toHaveBeenCalledWith('test');
    });
    describe('onClick', function () {
        beforeEach(function () {
            overlayPlay.target = {
                play: function () { },
                pause: function () { }
            };
        });
        it('current state play should set target to pause', function () {
            spyOn(overlayPlay, 'getState').and.callFake(function () { return vg_states_1.VgStates.VG_PLAYING; });
            spyOn(overlayPlay.target, 'pause');
            overlayPlay.onClick();
            expect(overlayPlay.getState).toHaveBeenCalled();
            expect(overlayPlay.target.pause).toHaveBeenCalled();
        });
        it('current state pause should set target to play', function () {
            spyOn(overlayPlay, 'getState').and.callFake(function () { return vg_states_1.VgStates.VG_PAUSED; });
            spyOn(overlayPlay.target, 'play');
            overlayPlay.onClick();
            expect(overlayPlay.getState).toHaveBeenCalled();
            expect(overlayPlay.target.play).toHaveBeenCalled();
        });
    });
    describe('getState', function () {
        beforeEach(function () {
            overlayPlay.target = {
                state: null
            };
        });
        it('if only one state returns that state', function () {
            overlayPlay.target.state = vg_states_1.VgStates.VG_PAUSED;
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PAUSED);
        });
        it('if more than one target should return pause if all of them are pause', function () {
            overlayPlay.target.state = [
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED
            ];
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PAUSED);
        });
        it('if more than one target should return play if any of them is play', function () {
            overlayPlay.target.state = [
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PLAYING,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED
            ];
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PLAYING);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctb3ZlcmxheS1wbGF5LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2Zy1vdmVybGF5LXBsYXkuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0NBQTRCLG1CQUFtQixDQUFDLENBQUE7QUFDaEQsdUJBQW9CLHlCQUF5QixDQUFDLENBQUE7QUFFOUMsMEJBQXVCLDBCQUEwQixDQUFDLENBQUE7QUFFbEQsUUFBUSxDQUFDLG1CQUFtQixFQUFFO0lBQzFCLElBQUksV0FBMEIsQ0FBQztJQUMvQixJQUFJLEdBQWMsQ0FBQztJQUNuQixJQUFJLEdBQVMsQ0FBQztJQUVkLFVBQVUsQ0FBQztRQUNQLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRTtnQkFDWCxZQUFZLEVBQUUsVUFBQyxJQUFJO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7YUFDSjtTQUNKLENBQUM7UUFFRixHQUFHLEdBQUcsSUFBSSxjQUFLLEVBQUUsQ0FBQztRQUNsQixXQUFXLEdBQUcsSUFBSSwrQkFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUNqQyxLQUFLLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBUSxDQUFDLENBQUMsQ0FBQztRQUVuRCxXQUFXLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUMzQixXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDaEIsVUFBVSxDQUFDO1lBQ1AsV0FBVyxDQUFDLE1BQU0sR0FBRztnQkFDakIsSUFBSSxFQUFFLGNBQVEsQ0FBQztnQkFDZixLQUFLLEVBQUUsY0FBUSxDQUFDO2FBQ25CLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtZQUNoRCxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBUSxNQUFNLENBQUMsb0JBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRixLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVuQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFdEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUU7WUFDaEQsS0FBSyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQVEsTUFBTSxDQUFDLG9CQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEYsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFbEMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXRCLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNoRCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ2pCLFVBQVUsQ0FBQztZQUNQLFdBQVcsQ0FBQyxNQUFNLEdBQUc7Z0JBQ2pCLEtBQUssRUFBRSxJQUFJO2FBQ2QsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNDQUFzQyxFQUFFO1lBQ3ZDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLG9CQUFRLENBQUMsU0FBUyxDQUFDO1lBRTlDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzRUFBc0UsRUFBRTtZQUN2RSxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRztnQkFDdkIsb0JBQVEsQ0FBQyxTQUFTO2dCQUNsQixvQkFBUSxDQUFDLFNBQVM7Z0JBQ2xCLG9CQUFRLENBQUMsU0FBUztnQkFDbEIsb0JBQVEsQ0FBQyxTQUFTO2FBQ3JCLENBQUM7WUFFRixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUVBQW1FLEVBQUU7WUFDcEUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUc7Z0JBQ3ZCLG9CQUFRLENBQUMsU0FBUztnQkFDbEIsb0JBQVEsQ0FBQyxVQUFVO2dCQUNuQixvQkFBUSxDQUFDLFNBQVM7Z0JBQ2xCLG9CQUFRLENBQUMsU0FBUzthQUNyQixDQUFDO1lBRUYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmdPdmVybGF5UGxheX0gZnJvbSBcIi4vdmctb3ZlcmxheS1wbGF5XCI7XG5pbXBvcnQge1ZnQVBJfSBmcm9tIFwiLi4vY29yZS9zZXJ2aWNlcy92Zy1hcGlcIjtcbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7VmdTdGF0ZXN9IGZyb20gXCIuLi9jb3JlL3N0YXRlcy92Zy1zdGF0ZXNcIjtcblxuZGVzY3JpYmUoJ1ZpZGVvZ3VsYXIgUGxheWVyJywgKCkgPT4ge1xuICAgIGxldCBvdmVybGF5UGxheTogVmdPdmVybGF5UGxheTtcbiAgICBsZXQgcmVmOkVsZW1lbnRSZWY7XG4gICAgbGV0IGFwaTpWZ0FQSTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZWYgPSB7XG4gICAgICAgICAgICBuYXRpdmVFbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgZ2V0QXR0cmlidXRlOiAobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpID0gbmV3IFZnQVBJKCk7XG4gICAgICAgIG92ZXJsYXlQbGF5ID0gbmV3IFZnT3ZlcmxheVBsYXkocmVmLCBhcGkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBnZXQgbWVkaWEgYnkgaWQgb24gaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oYXBpLCAnZ2V0TWVkaWFCeUlkJykuYW5kLmNhbGxGYWtlKCgpID0+IHsgfSk7XG5cbiAgICAgICAgb3ZlcmxheVBsYXkudmdGb3IgPSAndGVzdCc7XG4gICAgICAgIG92ZXJsYXlQbGF5Lm9uUGxheWVyUmVhZHkoKTtcblxuICAgICAgICBleHBlY3QoYXBpLmdldE1lZGlhQnlJZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QnKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdvbkNsaWNrJywgKCkgPT4ge1xuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXlQbGF5LnRhcmdldCA9IHtcbiAgICAgICAgICAgICAgICBwbGF5OiAoKSA9PiB7IH0sXG4gICAgICAgICAgICAgICAgcGF1c2U6ICgpID0+IHsgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2N1cnJlbnQgc3RhdGUgcGxheSBzaG91bGQgc2V0IHRhcmdldCB0byBwYXVzZScsICgpID0+IHtcbiAgICAgICAgICAgIHNweU9uKG92ZXJsYXlQbGF5LCAnZ2V0U3RhdGUnKS5hbmQuY2FsbEZha2UoKCkgPT4geyByZXR1cm4gVmdTdGF0ZXMuVkdfUExBWUlORzsgfSk7XG4gICAgICAgICAgICBzcHlPbihvdmVybGF5UGxheS50YXJnZXQsICdwYXVzZScpO1xuXG4gICAgICAgICAgICBvdmVybGF5UGxheS5vbkNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5nZXRTdGF0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgZXhwZWN0KG92ZXJsYXlQbGF5LnRhcmdldC5wYXVzZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnY3VycmVudCBzdGF0ZSBwYXVzZSBzaG91bGQgc2V0IHRhcmdldCB0byBwbGF5JywgKCkgPT4ge1xuICAgICAgICAgICAgc3B5T24ob3ZlcmxheVBsYXksICdnZXRTdGF0ZScpLmFuZC5jYWxsRmFrZSgoKSA9PiB7IHJldHVybiBWZ1N0YXRlcy5WR19QQVVTRUQ7IH0pO1xuICAgICAgICAgICAgc3B5T24ob3ZlcmxheVBsYXkudGFyZ2V0LCAncGxheScpO1xuXG4gICAgICAgICAgICBvdmVybGF5UGxheS5vbkNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5nZXRTdGF0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgZXhwZWN0KG92ZXJsYXlQbGF5LnRhcmdldC5wbGF5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldFN0YXRlJywgKCkgPT4ge1xuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXlQbGF5LnRhcmdldCA9IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2lmIG9ubHkgb25lIHN0YXRlIHJldHVybnMgdGhhdCBzdGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXlQbGF5LnRhcmdldC5zdGF0ZSA9IFZnU3RhdGVzLlZHX1BBVVNFRDtcblxuICAgICAgICAgICAgZXhwZWN0KG92ZXJsYXlQbGF5LmdldFN0YXRlKCkpLnRvRXF1YWwoVmdTdGF0ZXMuVkdfUEFVU0VEKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2lmIG1vcmUgdGhhbiBvbmUgdGFyZ2V0IHNob3VsZCByZXR1cm4gcGF1c2UgaWYgYWxsIG9mIHRoZW0gYXJlIHBhdXNlJywgKCkgPT4ge1xuICAgICAgICAgICAgb3ZlcmxheVBsYXkudGFyZ2V0LnN0YXRlID0gW1xuICAgICAgICAgICAgICAgIFZnU3RhdGVzLlZHX1BBVVNFRCxcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QQVVTRUQsXG4gICAgICAgICAgICAgICAgVmdTdGF0ZXMuVkdfUEFVU0VELFxuICAgICAgICAgICAgICAgIFZnU3RhdGVzLlZHX1BBVVNFRFxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgZXhwZWN0KG92ZXJsYXlQbGF5LmdldFN0YXRlKCkpLnRvRXF1YWwoVmdTdGF0ZXMuVkdfUEFVU0VEKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2lmIG1vcmUgdGhhbiBvbmUgdGFyZ2V0IHNob3VsZCByZXR1cm4gcGxheSBpZiBhbnkgb2YgdGhlbSBpcyBwbGF5JywgKCkgPT4ge1xuICAgICAgICAgICAgb3ZlcmxheVBsYXkudGFyZ2V0LnN0YXRlID0gW1xuICAgICAgICAgICAgICAgIFZnU3RhdGVzLlZHX1BBVVNFRCxcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QTEFZSU5HLFxuICAgICAgICAgICAgICAgIFZnU3RhdGVzLlZHX1BBVVNFRCxcbiAgICAgICAgICAgICAgICBWZ1N0YXRlcy5WR19QQVVTRURcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGV4cGVjdChvdmVybGF5UGxheS5nZXRTdGF0ZSgpKS50b0VxdWFsKFZnU3RhdGVzLlZHX1BMQVlJTkcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuXG5pbnRlcmZhY2UgRGVjb3JhdG9ySW52b2NhdGlvbiB7XG4gIHR5cGU6IEZ1bmN0aW9uO1xuICBhcmdzPzogYW55W107XG59XG4iXX0=
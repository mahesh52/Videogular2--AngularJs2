"use strict";
var vg_api_1 = require("./vg-api");
var vg_states_1 = require("../states/vg-states");
describe('Videogular Player', function () {
    var api;
    beforeEach(function () {
        api = new vg_api_1.VgAPI();
    });
    it('Should get the default media', function () {
        api.medias = {
            main: { id: 'main' },
            secondary: { id: 'secondary' }
        };
        expect(api.getDefaultMedia()).toEqual({ id: 'main' });
    });
    describe('getMasterMedia', function () {
        it('Should get the master media', function () {
            api.medias = {
                main: { id: 'main' },
                secondary: { id: 'secondary', vgMedia: true }
            };
            expect(api.getMasterMedia()).toEqual({ id: 'secondary', vgMedia: true });
        });
        it('Should get the default media when no master is defined', function () {
            api.medias = {
                main: { id: 'main' },
                secondary: { id: 'secondary' }
            };
            expect(api.getMasterMedia()).toEqual(api.getDefaultMedia());
        });
    });
    it('Should get the api if we do not pass an id', function () {
        api.medias = {
            main: { id: 'main' },
            secondary: { id: 'secondary' }
        };
        expect(api.getMediaById()).toEqual(api);
    });
    it('Should get the api if we pass an *', function () {
        api.medias = {
            main: { id: 'main' },
            secondary: { id: 'secondary' }
        };
        expect(api.getMediaById('*')).toEqual(api);
    });
    it('Should get a media object if we pass an id', function () {
        api.medias = {
            main: { id: 'main' },
            secondary: { id: 'secondary' }
        };
        expect(api.getMediaById('main')).toEqual({ id: 'main' });
    });
    it('Should play all medias', function () {
        api.medias = {
            main: { id: 'main', play: function () { } },
            secondary: { id: 'secondary', play: function () { } }
        };
        spyOn(api.medias.main, 'play').and.callThrough();
        spyOn(api.medias.secondary, 'play').and.callThrough();
        api.play();
        expect(api.medias.main.play).toHaveBeenCalled();
        expect(api.medias.secondary.play).toHaveBeenCalled();
    });
    it('Should pause all medias', function () {
        api.medias = {
            main: { id: 'main', pause: function () { } },
            secondary: { id: 'secondary', pause: function () { } }
        };
        spyOn(api.medias.main, 'pause').and.callThrough();
        spyOn(api.medias.secondary, 'pause').and.callThrough();
        api.pause();
        expect(api.medias.main.pause).toHaveBeenCalled();
        expect(api.medias.secondary.pause).toHaveBeenCalled();
    });
    it('Should get duration', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var duration = api.duration;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('duration');
    });
    it('Should set a state', function () {
        spyOn(api, '$$setAllProperties').and.callFake(function () { });
        api.state = 'pause';
        expect(api.$$setAllProperties).toHaveBeenCalledWith('state', 'pause');
    });
    it('Should get state', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var state = api.state;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('state');
    });
    it('Should set a currentTime', function () {
        spyOn(api, '$$setAllProperties').and.callFake(function () { });
        api.currentTime = 50;
        expect(api.$$setAllProperties).toHaveBeenCalledWith('currentTime', 50);
    });
    it('Should get currentTime', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var currentTime = api.currentTime;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('currentTime');
    });
    it('Should set a volume', function () {
        spyOn(api, '$$setAllProperties').and.callFake(function () { });
        api.volume = 0.5;
        expect(api.$$setAllProperties).toHaveBeenCalledWith('volume', 0.5);
    });
    it('Should get volume', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var volume = api.volume;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('volume');
    });
    it('Should set a playback rate', function () {
        spyOn(api, '$$setAllProperties').and.callFake(function () { });
        api.playbackRate = 0.5;
        expect(api.$$setAllProperties).toHaveBeenCalledWith('playbackRate', 0.5);
    });
    it('Should get playbackRate', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var playbackRate = api.playbackRate;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('playbackRate');
    });
    it('Should get canPlay', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var canPlay = api.canPlay;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('canPlay');
    });
    it('Should get canPlayThrough', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var canPlayThrough = api.canPlayThrough;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('canPlayThrough');
    });
    it('Should get isMetadataLoaded', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var isMetadataLoaded = api.isMetadataLoaded;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('isMetadataLoaded');
    });
    it('Should get isWaiting', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var isWaiting = api.isWaiting;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('isWaiting');
    });
    it('Should get isCompleted', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var isCompleted = api.isCompleted;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('isCompleted');
    });
    it('Should get time', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var time = api.time;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('time');
    });
    it('Should get buffer', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var time = api.buffer;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('buffer');
    });
    it('Should get buffered', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var buffered = api.buffered;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('buffered');
    });
    it('Should get subscriptions', function () {
        spyOn(api, '$$getAllProperties').and.callFake(function () { });
        var subscriptions = api.subscriptions;
        expect(api.$$getAllProperties).toHaveBeenCalledWith('subscriptions');
    });
    it('Should seek to a specified time by second', function () {
        api.medias = {
            main: { id: 'main' },
            secondary: { id: 'secondary' }
        };
        spyOn(api, '$$seek').and.callFake(function () { });
        api.seekTime(10);
        expect(api.$$seek).toHaveBeenCalledWith({ id: 'main' }, 10, false);
        expect(api.$$seek).toHaveBeenCalledWith({ id: 'secondary' }, 10, false);
    });
    it('Should seek to a specified time by percentage', function () {
        api.medias = {
            main: { id: 'main' },
            secondary: { id: 'secondary' }
        };
        spyOn(api, '$$seek').and.callFake(function () { });
        api.seekTime(10, true);
        expect(api.$$seek).toHaveBeenCalledWith({ id: 'main' }, 10, true);
        expect(api.$$seek).toHaveBeenCalledWith({ id: 'secondary' }, 10, true);
    });
    it('Should seek media files to a specified time by second', function () {
        var media = {
            currentTime: 0
        };
        api.$$seek(media, 10);
        expect(media.currentTime).toBe(10);
    });
    it('Should seek media files to a specified time by percentage', function () {
        var media = {
            duration: 200,
            currentTime: 0,
            subscriptions: {}
        };
        api.$$seek(media, 10, true);
        expect(media.currentTime).toBe(20);
    });
    it('Should get a property from all media objects and return an object', function () {
        api.medias = {
            main: { id: 'main', state: vg_states_1.VgStates.VG_PLAYING },
            secondary: { id: 'secondary', state: vg_states_1.VgStates.VG_PAUSED }
        };
        var states = api.$$getAllProperties('state');
        expect(states).toEqual(vg_states_1.VgStates.VG_PLAYING);
    });
    it('Should get a property from all media objects and return a plain value if there is only one media object', function () {
        api.medias = {
            main: { id: 'main', state: vg_states_1.VgStates.VG_PLAYING }
        };
        var states = api.$$getAllProperties('state');
        expect(states).toEqual(vg_states_1.VgStates.VG_PLAYING);
    });
    it('Should set a property to all media objects', function () {
        api.medias = {
            main: { id: 'main', state: 'stop' },
            secondary: { id: 'secondary', state: 'stop' }
        };
        api.$$setAllProperties('state', vg_states_1.VgStates.VG_PLAYING);
        expect(api.medias.main.state).toBe(vg_states_1.VgStates.VG_PLAYING);
        expect(api.medias.secondary.state).toBe(vg_states_1.VgStates.VG_PLAYING);
    });
    it('Should register a new media object', function () {
        var media = { id: 'main' };
        api.registerMedia(media);
        expect(api.medias['main']).toBe(media);
    });
});
//# sourceMappingURL=data:application/json;base64,